---
##
# Deploys the specified ansible role to the specified AWS auto-scaling group as follows:
#
# 1. Create new EC2 instance_type
# 2. Apply application ansible role
# 3. Bake an AMI
# 4. Create launch configuration using the newly created AMI
# 5. Update the specified auto-scaling group to use the newly created launch configuration
# 6. Replace running instances one-at-a-time
#
# Requires aws_config with the following structure:
# aws_config: {
#   env_name: {
#     keypair: "...",
#     region: "...",
#     base_ami: "...",
#     public_subnet: "...",
#     ssh_security_group: "..."
#   }
# }
#
# And app_config with the following structure
# app_config: {
#   app_name: {
#     ansible_role_name: "...",
#       uat: {
#         security_groups: [...],
#         auto_scaling_group_name: "...",
#         role_name: "...",
#         instance_type: "t2.medium"
#       }
#   }
# }
##
- name: launch AMI instance
  hosts: localhost
  connection: local

  vars_files:
    - vars/aws-config.yml

  roles:
    - role: aws-launch-user
      keys_directory: "{{ launch_user_keys }}"
      when: launch_user is defined

    - role: aws-launch
      ami_id: "{{ aws_config[deploy_env].base_ami }}"
      subnet_id: "{{ aws_config[deploy_env].public_subnet }}"
      region: "{{ aws_config[deploy_env].region }}"
      keypair: "{{ aws_config[deploy_env].keypair }}"
      security_groups: "{{ [aws_config[deploy_env].ssh_security_group] | union(app_config[app_name][deploy_env].security_groups) }}"
      playbook_group: "tmp_ami_group"
      user_data: "{{ launch_user_init_script | default(None) or omit }}"
      ami_user: "{{ launch_user | default(None) or omit }}"

- name: deploy application to new instance
  hosts: tmp_ami_group
  vars_files:
    - vars/aws-config.yml
    - roles/{{ app_config[app_name].ansible_role_name }}/vars/vault_common.yml
    - roles/{{ app_config[app_name].ansible_role_name }}/vars/vault_{{ deploy_env }}.yml

  roles:
    - role: "{{ app_config[app_name].ansible_role_name }}"
      is_aws: true
      region: "{{ aws_config[deploy_env].region }}"

- name: bake and deploy ami
  hosts: localhost
  connection: local
  vars_files:
    - vars/aws-config.yml

  roles:
    - role: aws-bake
      ec2_instance: "{{ launched_instance }}"

    - role: aws-deploy
      image_id: "{{ ami.image_id }}"
      region: "{{ aws_config[deploy_env].region }}"
      keypair: "{{ aws_config[deploy_env].keypair }}"
      security_groups: "{{ app_config[app_name][deploy_env].security_groups }}"

      instance_profile_name: "{{ app_config[app_name][deploy_env].role_name }}"
      instance_type: "{{ app_config[app_name][deploy_env].instance_type }}"
      volumes:
        - device_name: /dev/xvda
          volume_size: "{{ app_config[app_name][deploy_env].volume_size_gb | default(8) }}"
          volume_type: gp2
          delete_on_termination: true

      launch_config_name: "{{ app_group }}-{{ app_project }}-{{ app_name }}-{{ deploy_env }}-{{ timestamp }}"
      auto_scaling_group_name: "{{ app_config[app_name][deploy_env].auto_scaling_group_name }}"

      desired_capacity: "{{ app_config[app_name][deploy_env].auto_scaling_desired | default(1) }}"
      min_size: "{{ app_config[app_name][deploy_env].auto_scaling_min | default(1) }}"
      max_size: "{{ app_config[app_name][deploy_env].auto_scaling_max | default(1) }}"
      replace_batch_size: 1
